
# coding: utf-8

# In[1]:

grid = """
     |     |     
  1  |  2  |  3
_____|_____|_____
     |     |   
  4  |  5  |  6 
_____|_____|_____
     |     |     
  7  |  8  |  9   
     |     |     """


# In[1]:

global grid


# In[2]:

board = {1:"v1",2:"v2",3:"v3",4:"v4",5:"v5",6:"v6",7:"v7",8:"v8",9:"v9"}


# In[3]:

global board


# In[4]:

global xmove


# In[5]:

global omove


# In[6]:

def TicTacToe():
    global grid
    global board
    play = raw_input("Welcome to Darryl's Tic-Tac-Toe game. Created using Python. Would you like to play? (y/n) (q to quit)  ",)
    if play == "y" or play == "Y":
        board = {1:"v1",2:"v2",3:"v3",4:"v4",5:"v5",6:"v6",7:"v7",8:"v8",9:"v9"}
        grid = """
     |     |     
  1  |  2  |  3
_____|_____|_____
     |     |   
  4  |  5  |  6 
_____|_____|_____
     |     |     
  7  |  8  |  9   
     |     |     """
        return x_moves()
    else:
        print "\ntoo bad :( \n"
        return TicTacToe()


# In[7]:

def x_moves():
    global grid
    global board
    print grid
    xmove = raw_input("Player one, where do you want to put your 'X'?  ",)    
    if xmove in grid and int(xmove) in range(1,10):
        grid = grid.replace(xmove,"X")
        board[int(xmove)] = "x"
        return win_check_x()
    elif xmove == "q":
        print "quiter!"
        return TicTacToe()
    else:
        print grid + "   Nerp. That doesn't compute, try again. \n"
        return x_moves()


# In[8]:

def o_moves():
    global grid
    global board
    omove = raw_input("Player two, where do you want to put your 'O'?  ",)    
    if omove in grid and int(omove) in range(1,10):
        grid = grid.replace(omove,"O")
        board[int(omove)] = "O"
        return win_check_o()
    elif omove == "q":
        print "quiter!"
        return TicTacToe()
    else:
        print grid + "   Nerp. That doesn't compute, try again. \n"
        return o_moves()


# In[9]:

def win_check_x():
    if board[1]==board[2]==board[3]:   # line H1 win
        print grid +"   GAME OVER, X WINS! \n"
        return TicTacToe()
    elif board[4]==board[5]==board[6]: # line H2 win
        print grid +"   GAME OVER, X WINS! \n"
        return TicTacToe()
    elif board[7]==board[8]==board[9]: # line H3 win
        print grid +"   GAME OVER, X WINS! \n"
        return TicTacToe()
    elif board[1]==board[4]==board[7]: # line V1 win
        print grid +"   GAME OVER, X WINS! \n"
        return TicTacToe()
    elif board[2]==board[5]==board[8]: # line V2 win
        print grid +"   GAME OVER, X WINS! \n"
        return TicTacToe()
    elif board[3]==board[6]==board[9]: # line V3 win
        print grid +"   GAME OVER, X WINS! \n"
        return TicTacToe()
    elif board[1]==board[5]==board[9]: # line D1 win
        print grid +"   GAME OVER, X WINS! \n"
        return TicTacToe()
    elif board[3]==board[5]==board[7]: # line D1 win
        print grid +"   GAME OVER, X WINS! \n"
        return TicTacToe()
    elif len(set(board.values())) == 2:  # need to check set of board for more len 2
        print grid + "   CAT'S GAME! \n"
        return TicTacToe()
    else:
        print grid + "   READY PLAYER TWO \n"
        return o_moves()


# In[10]:

def win_check_o():
    if board[1]==board[2]==board[3]:   # line H1 win
        print grid +"   GAME OVER, O WINS! \n"
        return TicTacToe()
    elif board[4]==board[5]==board[6]: # line H2 win
        print grid +"   GAME OVER, O WINS! \n"
        return TicTacToe()
    elif board[7]==board[8]==board[9]: # line H3 win
        print grid +"   GAME OVER, O WINS! \n"
        return TicTacToe()
    elif board[1]==board[4]==board[7]: # line V1 win
        print grid +"   GAME OVER, O WINS! \n"
        return TicTacToe()
    elif board[2]==board[5]==board[8]: # line V2 win
        print grid +"   GAME OVER, O WINS! \n"
        return TicTacToe()
    elif board[3]==board[6]==board[9]: # line V3 win
        print grid +"   GAME OVER, O WINS! \n"
        return TicTacToe()
    elif board[1]==board[5]==board[9]: # line D1 win
        print grid +"   GAME OVER, O WINS! \n"
        return TicTacToe()
    elif board[3]==board[5]==board[7]: # line D1 win
        print grid +"   GAME OVER, O WINS! \n"
        return TicTacToe()
    elif len(set(board.values())) == 2:  # need to check set of board for more len 2
        print grid + "   CAT'S GAME! \n"
        return TicTacToe()
    else:
        print grid + "   READY PLAYER ONE \n"
        return x_moves()


# In[ ]:

TicTacToe()


# In[ ]:


